/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-present by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */

package ti.polyfill

import android.os.Build
import android.view.View
import androidx.annotation.RequiresApi
import com.google.android.material.snackbar.Snackbar
import com.google.android.play.core.splitinstall.SplitInstallManagerFactory
import com.google.android.play.core.splitinstall.SplitInstallRequest
import com.google.android.play.core.splitinstall.SplitInstallStateUpdatedListener
import org.appcelerator.kroll.KrollDict
import org.appcelerator.kroll.KrollFunction
import org.appcelerator.kroll.KrollModule
import org.appcelerator.kroll.annotations.Kroll
import org.appcelerator.kroll.annotations.Kroll.method
import org.appcelerator.kroll.common.Log
import org.appcelerator.titanium.TiApplication
import java.text.NumberFormat
import java.util.*

@Kroll.module(name = "TitaniumPolyfill", id = "ti.polyfill")
class TitaniumPolyfillModule: KrollModule() {

	@method
	fun formattedCurrency(params: KrollDict): String {
		val value = params.getDouble("value")
		val currency = params.getString("currency")
		val format: NumberFormat = NumberFormat.getCurrencyInstance(Locale.getDefault())
		format.currency = Currency.getInstance(currency)

		return format.format(value)
	}

	@method
	fun timezoneId(): String {
		return TimeZone.getDefault().id
	}

	@method
	fun showNotification(params: KrollDict) {
		val title = params.getString("title");
		val duration = params.optInt("duration", Snackbar.LENGTH_SHORT);

		val view = TiApplication.getAppCurrentActivity().findViewById(android.R.id.content) as View
		val snackBar = Snackbar.make(view, title, duration)
		snackBar.setAction("OK", null)

		snackBar.show()
	}

	@RequiresApi(Build.VERSION_CODES.LOLLIPOP)
	@method
	fun downloadLanguage(language: String, callback: KrollFunction) {
		val splitInstallManager = SplitInstallManagerFactory.create(TiApplication.getAppRootOrCurrentActivity().applicationContext)
		var mySessionId = 0

		// Creates a listener for request status updates.
		val listener = SplitInstallStateUpdatedListener { state ->
			if (state.sessionId() == mySessionId) {
				Log.d("ti.polyfill", "${state.status()}")
			}
		}

		val request = SplitInstallRequest.newBuilder()
				.addLanguage(Locale.forLanguageTag(language))
				.build()

		splitInstallManager.registerListener(listener)
		splitInstallManager
				.startInstall(request)
				.addOnSuccessListener {
					val event = KrollDict()
					event["success"] = true

					splitInstallManager.unregisterListener(listener)
					callback.callAsync(krollObject, event)
				}
				.addOnFailureListener { exception ->
					val event = KrollDict()
					event["success"] = false
					event["error"] = exception.localizedMessage

					splitInstallManager.unregisterListener(listener)
					callback.callAsync(krollObject, event)
				}

	}
}
